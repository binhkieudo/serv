/*  (c) Copyright 2014 - 2021 Xilinx, Inc. All rights reserved.

 This file contains confidential and proprietary information
 of Xilinx, Inc. and is protected under U.S. and
 international copyright and other intellectual property
 laws.

 DISCLAIMER
 This disclaimer is not a license and does not grant any
 rights to the materials distributed herewith. Except as
 otherwise provided in a valid license issued to you by
 Xilinx, and to the maximum extent permitted by applicable
 law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
 WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
 AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
 BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
 INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
 (2) Xilinx shall not be liable (whether in contract or tort,
 including negligence, or under any other theory of
 liability) for any loss or damage of any kind or nature
 related to, arising under or in connection with these
 materials, including for any direct, or any indirect,
 special, incidental, or consequential loss or damage
 (including loss of data, profits, goodwill, or any type of
 loss or damage suffered as a result of any action brought
 by a third party) even if such damage or loss was
 reasonably foreseeable or Xilinx had been advised of the
 possibility of the same.

 CRITICAL APPLICATIONS
 Xilinx products are not designed or intended to be fail-
 safe, or for use in any application requiring fail-safe
 performance, such as life-support or safety devices or
 systems, Class III medical devices, nuclear facilities,
 applications related to the deployment of airbags, or any
 other applications that could lead to death, personal
 injury, or severe property or environmental damage
 (individually and collectively, "Critical
 Applications"). Customer assumes the sole risk and
 liability of any use of Xilinx products in Critical
 Applications, subject only to applicable laws and
 regulations governing limitations on product liability.

 THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
 PART OF THIS FILE AT ALL TIMES.                       */


#ifndef __SIM_CPU_BASE_H__
#define __SIM_CPU_BASE_H__

#include <array>
#include "xtlm.h"

//! Macros for declaring xtlm sockets with names as generated by IPI...
#define AXIMM_INITIATOR_SOCKET(indx) \
xtlm::xtlm_aximm_initiator_socket* indx ## _AXI_tlm_aximm_read_socket; \
xtlm::xtlm_aximm_initiator_socket* indx ## _AXI_tlm_aximm_write_socket;

#define AXIMM_TARGET_SOCKET(indx) \
xtlm::xtlm_aximm_target_socket* indx ## _AXI_tlm_aximm_read_socket; \
xtlm::xtlm_aximm_target_socket* indx ## _AXI_tlm_aximm_write_socket;

#define AXIS_INITIATOR_SOCKET(indx) \
xtlm::xtlm_axis_initiator_socket* indx ## _AXIS_tlm_axis_socket;

#define AXIS_TARGET_SOCKET(indx) \
xtlm::xtlm_axis_target_socket* indx ## _AXIS_tlm_axis_socket;


class sim_cpu_base : public sc_core::sc_module
{
    public:
        SC_HAS_PROCESS(sim_cpu_base);
        sim_cpu_base(sc_module_name name); 
        virtual ~sim_cpu_base() {}

        //! AXIMM xtlm initiator sockets 
        AXIMM_INITIATOR_SOCKET  (M00);
        AXIMM_INITIATOR_SOCKET  (M01);
        AXIMM_INITIATOR_SOCKET  (M02);
        AXIMM_INITIATOR_SOCKET  (M03);
        AXIMM_INITIATOR_SOCKET  (M04);
        AXIMM_INITIATOR_SOCKET  (M05);
        AXIMM_INITIATOR_SOCKET  (M06);
        AXIMM_INITIATOR_SOCKET  (M07);
        AXIMM_INITIATOR_SOCKET  (M08);
        AXIMM_INITIATOR_SOCKET  (M09);
        AXIMM_INITIATOR_SOCKET  (M10);
        AXIMM_INITIATOR_SOCKET  (M11);
        AXIMM_INITIATOR_SOCKET  (M12);
        AXIMM_INITIATOR_SOCKET  (M13);
        AXIMM_INITIATOR_SOCKET  (M14);
        AXIMM_INITIATOR_SOCKET  (M15);

        //! AXIMM xtlm target sockets 
        AXIMM_TARGET_SOCKET     (S00);
        AXIMM_TARGET_SOCKET     (S01);
        AXIMM_TARGET_SOCKET     (S02);
        AXIMM_TARGET_SOCKET     (S03);
        AXIMM_TARGET_SOCKET     (S04);
        AXIMM_TARGET_SOCKET     (S05);
        AXIMM_TARGET_SOCKET     (S06);
        AXIMM_TARGET_SOCKET     (S07);
        AXIMM_TARGET_SOCKET     (S08);
        AXIMM_TARGET_SOCKET     (S09);
        AXIMM_TARGET_SOCKET     (S10);
        AXIMM_TARGET_SOCKET     (S11);
        AXIMM_TARGET_SOCKET     (S12);
        AXIMM_TARGET_SOCKET     (S13);
        AXIMM_TARGET_SOCKET     (S14);
        AXIMM_TARGET_SOCKET     (S15);

        //! AXIS xtlm initiator sockets 
        AXIS_INITIATOR_SOCKET  (M00);
        AXIS_INITIATOR_SOCKET  (M01);
        AXIS_INITIATOR_SOCKET  (M02);
        AXIS_INITIATOR_SOCKET  (M03);
        AXIS_INITIATOR_SOCKET  (M04);
        AXIS_INITIATOR_SOCKET  (M05);
        AXIS_INITIATOR_SOCKET  (M06);
        AXIS_INITIATOR_SOCKET  (M07);
        AXIS_INITIATOR_SOCKET  (M08);
        AXIS_INITIATOR_SOCKET  (M09);
        AXIS_INITIATOR_SOCKET  (M10);
        AXIS_INITIATOR_SOCKET  (M11);
        AXIS_INITIATOR_SOCKET  (M12);
        AXIS_INITIATOR_SOCKET  (M13);
        AXIS_INITIATOR_SOCKET  (M14);
        AXIS_INITIATOR_SOCKET  (M15);

        //! AXIS xtlm target sockets 
        AXIS_TARGET_SOCKET     (S00);
        AXIS_TARGET_SOCKET     (S01);
        AXIS_TARGET_SOCKET     (S02);
        AXIS_TARGET_SOCKET     (S03);
        AXIS_TARGET_SOCKET     (S04);
        AXIS_TARGET_SOCKET     (S05);
        AXIS_TARGET_SOCKET     (S06);
        AXIS_TARGET_SOCKET     (S07);
        AXIS_TARGET_SOCKET     (S08);
        AXIS_TARGET_SOCKET     (S09);
        AXIS_TARGET_SOCKET     (S10);
        AXIS_TARGET_SOCKET     (S11);
        AXIS_TARGET_SOCKET     (S12);
        AXIS_TARGET_SOCKET     (S13);
        AXIS_TARGET_SOCKET     (S14);
        AXIS_TARGET_SOCKET     (S15);

       // Clock
       sc_in<bool> clk;

    protected:
        //! Array of AXIMM Sockets pointing to individual sockets.
        //  Keeping in arry to iterate over based on the Model configuration
        std::array<xtlm::xtlm_aximm_initiator_socket**, 16>  m_aximm_initiator_rd_array;
        std::array<xtlm::xtlm_aximm_initiator_socket**, 16>  m_aximm_initiator_wr_array;

        std::array<xtlm::xtlm_aximm_target_socket**, 16>     m_aximm_target_rd_array;
        std::array<xtlm::xtlm_aximm_target_socket**, 16>     m_aximm_target_wr_array;

        //! Array of AXIS Sockets pointing to individual sockets.
        std::array<xtlm::xtlm_axis_initiator_socket**, 16>  m_axis_initiator_array;
        std::array<xtlm::xtlm_axis_target_socket**, 16>     m_axis_target_array;

        //! typdefs
        typedef sc_vector<xtlm::xtlm_aximm_initiator_socket > xtlm_aximm_initiator_vector;
        typedef sc_vector<xtlm::xtlm_aximm_target_socket >    xtlm_aximm_target_vector;
        typedef sc_vector<xtlm::xtlm_axis_initiator_socket >  xtlm_axis_initiator_vector;
        typedef sc_vector<xtlm::xtlm_axis_target_socket >     xtlm_axis_target_vector;

        typedef sc_vector<xtlm::xtlm_aximm_initiator_rd_socket_util >  xtlm_aximm_initiator_rd_util_vector;
        typedef sc_vector<xtlm::xtlm_aximm_initiator_wr_socket_util >  xtlm_aximm_initiator_wr_util_vector;
        typedef sc_vector<xtlm::xtlm_aximm_target_rd_socket_util >     xtlm_aximm_target_rd_util_vector;
        typedef sc_vector<xtlm::xtlm_aximm_target_wr_socket_util >     xtlm_aximm_target_wr_util_vector;

        typedef sc_vector<xtlm::xtlm_axis_initiator_socket_util >   xtlm_axis_initiator_util_vector;
        typedef sc_vector<xtlm::xtlm_axis_target_socket_util >      xtlm_axis_target_util_vector;

    private:
        void initialize_array();
};

  //! Undefine all Macros which are required only 
  //  in sim_cpu_base class scope and not exposed outside 
  //  of this class...
#undef AXIMM_INITIATOR_SOCKET
#undef AXIMM_TARGET_SOCKET
#undef AXIS_INITIATOR_SOCKET
#undef AXIS_TARGET_SOCKET

#endif
